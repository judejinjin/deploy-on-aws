Exercise 3.2
 Bookmark this page
In this exercise, you will extend the ci-cd-pipeline you created in a previous exercise and add a stage to automate the provisioning of the infrastructure for a test environment. In the previous exercise, you launched an AWS CloudFormation stack to provision the test environment. You will integrate the same AWS CloudFormation template with the ci-cd-pipeline to automate the provisioning of the infrastructure. You will also use an AWS Systems Manager feature called Parameter Store to store the database master user password instead of committing the secret to the AWS CodeCommit repository. By the end of this exercise, your pipeline will have three stages as shown below, and you will learn how AWS CloudFormation integrates with AWS CodePipeline to further automate your CI/CD pipeline. 


To begin, follow the steps below.

1. Store the database master user password in the AWS Systems Manager Parameter Store.
In this section, you will store the database master user password you created in the previous exercise in the AWS Systems Manager Parameter Store. It is a recommended security practice to avoid committing secrets such as database passwords, access keys, etc. to source control. Instead, securely store them in a service such AWS Systems Manager Parameter Store. To store the database master user password in AWS Systems Manager Parameter Store, run the command below.

In your AWS Cloud9 terminal, run the command below. Replace REPLACE_WITH_DATABASE_MASTER_USER_PASSWORD with the TEST root password on your password sheet.
aws ssm put-parameter --name "TEST-DATABASE-MASTER-PASSWORD" --value 'REPLACE_WITH_DATABASE_MASTER_USER_PASSWORD' --type "SecureString"

2. Explore the prepare-buildspec.yml file.
Open the /BuildSpecs/prepare-buildspec.yml file you downloaded in the previous exercise.
Observe that in the build phase of the project, the database master user password is extracted from the AWS Systems Manager Parameter Store and passed on to the AWS CloudFormation configuration file edx-provision-configuration.json. In the next section, you will create an AWS CodeBuild project using the prepare-buildspec.yml file.
3. Create an AWS CodeBuild project.
In this section, you will create a CodeBuild project with the build spec file: /BuildSpecs/prepare-buildspec.yml. In a subsequent section, you will add the CodeBuild project you create in this section to the ci-cd-pipeline. Follow the steps below.

In the AWS Management Console, click Services, then click CodeBuild to open the CodeBuild dashboard.
Make sure you are in the Oregon region.
Click Create build project.
For Project name, type Prepare
For Source provider, select AWS CodeCommit.
For Repository, select edx-Deploying.
For Environment image, click Custom image.
For Environment type, select Linux.
Click Other location.
For Other location, type amazonlinux:2017.09
Scroll down, to the Buildspec section.
For Buildspec name, type BuildSpecs/prepare-buildspec.yml
Make a note of the role name. The role name is similar to codebuild-Prepare-service-role. You will update the role in the next section.
In the Environment section, expand Additional configuration
To add an environment variable, scroll down to Environment variables.
In the Name textbox, type ENV_PREFIX
In the Value textbox, type TEST-
Important Make sure to type the value as shown above.
In the Artifacts section, for Type, select Amazon S3.
For Bucket name, select the bucket you created in the previous section with the bucket name YOUR_INITIALS-tempartifacts.
Scroll down, leave the rest of the default settings, and click Create build project.
4. Update the IAM role created by AWS CodeBuild.
In this section, you will update the IAM role created by CodeBuild to grant access to AWS Systems Manager Parameter Store to get the secret you created earlier. Follow the steps below.

In the console, click Services, then click IAM to open the IAM dashboard.
In the left side navigation menu, click Roles.
In the search textbox, paste the IAM role name you copied in the previous section. The IAM role name is similar to codebuild-Prepare-service-role.
Select the codebuild-Prepare-service-role IAM role.
Click Add inline policy at the right side.
Click the JSON tab.
In the editor, replace the IAM policy with policy below.

{
  "Version": "2012-10-17",
  "Statement": [
      {
          "Effect": "Allow",
          "Action": [
              "ssm:GetParameter"
              ],
              "Resource":"*"
      }
  ]
}
Click Review policy.
For Name, type ssm-parameter-access
Click Create policy.
You have successfully modified the CodeBuild role to grant access to the AWS Systems Manager Parameter Store.

5. Create a Provision stage and add the CodeBuild project to the pipeline.
In this section, you will modify the ci-cd-pipeline to add a stage called Provision. The Provision stage will have two actions: Prepare and ProvisionTestEnvironment. In the Prepare action, you will add the CodeBuild project you created in a previous section to the ci-cd-pipeline. In the Prepare action, the CodeBuild project will run the command specified in the prepare-buildspec.yml file to extract the database master user password stored in the AWS Systems Manager Parameter Store and pass it on to the AWS CloudFormation template.

In the ProvisionTestEnvironment action, you will add the AWS CloudFormation template to the pipeline. As you know, the AWS CloudFormation template needs the database password as an input parameter. The template will now be able to pull the database password from the Prepare action. You will add the ProvisionTestEnvironment action in a subsequent section.

In this section, you will create the Provision stage and add the first action, Prepare, with the CodeBuild project in it. Follow the steps below.

In the console, click Services, then click CodePipeline to open the CodePipeline dashboard.
Click the hyperlink for ci-cd-pipeline.
To add a new stage, click Edit.
Click the Add Stage button after the CodeBuild stage, as shown below. 

For Stage name, type Provision
Click Add stage.
Click Add action group.
For Action name, type Prepare
For Action provider, select Build > AWS CodeBuild.
For Project name, select Prepare.
For Input artifacts #1, select SourceArtifact - Defined by: Source.
For Output artifact #1, type MyAppPre
Click Save. Scroll to the top and click Save.
Click Save on the prompt. You should see the Prepare action in the Provision stage in the pipeline.
You have successfully modified the ci-cd-pipeline to pull the database master user password from Systems Manager and pass it on to AWS CloudFormation.

6. Create an IAM role for AWS CloudFormation.
In this section, you will create an IAM role for AWS CloudFormation and grant access to the various AWS resources created by the AWS CloudFormation template. You will need this role when you add the ProvisionTestEnvironment action with AWS CloudFormation to the ci-cd-pipeline in the next section. If you are familiar with IAM roles, you may want to complete this section by using the properties below before reading the step-by-step instructions.

Trusted entity: CloudFormation
Permissions: AmazonEC2FullAccess, AmazonRDSFullAccess, IAMFullAccess, AWSCodeDeployFullAccess 
Role name: cloudformation-provision-role

Expand for step-by-step instructions.
7. Add the AWS CloudFormation action to the pipeline.
In this section, you will modify the ci-cd-pipeline and add the ProvisionTestEnvironment action to the Provision stage. In the ProvisionTestEnvironment action, you will add the AWS CloudFormation template to provision a test environment. Follow the steps below.

In the console, click Services, then click CodePipeline to open the CodePipeline dashboard.
Click the hyperlink for ci-cd-pipeline.
Click Edit.
Scroll down to the Provision stage and edit the stage by Edit stage as shown below. 

Click the Add action group button below the Prepare action as shown in the screenshot below. 

For Action name, type ProvisionTestEnvironment
For Action provider, select Deploy > AWS CloudFormation.
For Action mode, select Create or update a stack.
For Stack name, select TEST-Stack.
For Template, type MyAppPre::Templates/edx-provision.yaml
This template is in the output from the previous action, Prepare.

For Template configuration, type MyAppPre::Templates/edx-provision-configuration.json
For Capabilities, select CAPABILITY_IAM.
For Role name, select cloudformation-provision-role.
For Input artifacts #1, select MyAppPre. MyAppPre is the output artifact from the previous action, Prepare.
Click Save.
Scroll to the top and click Save.
Click Save on the prompt. You should see the ProvisionTestEnvironment action in the Provision stage in the pipeline.
Your ci-cd-pipeline is now capable of executing the AWS CloudFormation template and provision a test environment.

8. Test the pipeline.
In this section, you will test the modified ci-cd-pipeline by updating the AWS CloudFormation template and then push the update to AWS CodeCommit. This will trigger the pipeline and you will be able to observe the execution of the three stages and verify the change you made in the AWS CloudFormation template. Follow the steps below.

In your AWS Cloud9 environment, open the Templates/edx-provision.yaml file. This is the AWS CloudFormation template linked to the ci-cd-pipeline.
Let’s say you want to add a new tag to the web server instance provisioned by the template. Locate the string ‘TEST-WebServerInstance’ in the Templates/edx-provision.yaml file. You should be able to find a tag with the value as TEST-WebServerInstance Instance as shown in the screenshot below. 

Add a new tag. For Key, type Owner, and for Value, type “YOUR_NAME”. Make sure to replace YOUR_NAME with your own name for the tag value. Refer to the screenshot below. 

Important Make sure the alignment of the new tag matches the tag above.
Save the Templates/edx-provision.yaml file.
Commit and push the edx-provision.yaml file to the CodeCommit repository by running the commands below.

git add *
git commit -m "new owner tag"
git push origin dev
The pipeline will be triggered a few seconds after you push the template update to CodeCommit. It should take about five minutes for the pipeline to finish executing all the stages. Observe that, with every code change, the static code analysis and unit tests run and provide the code coverage and unit test success/failure report. The pipeline also updates the test environment with every code change.
To verify that the new tag has been added to the TEST-WebServerInstance, click the Details hyperlink in the ProvisionTestEnvironment action as shown below. 

Expand the Resources section.
Scroll down to WebServerInstance at the bottom of the list. Click the instance-ID hyperlink. You should see the instance details open up in the Amazon EC2 dashboard.
Click the Tags tab in the bottom pane. You should see the Owner tag that you added in the AWS CloudFormation template.
You have successfully set up a pipeline that modifies the infrastructure via source control without having to go the AWS Management Console, thus treating your infrastructure as code.
